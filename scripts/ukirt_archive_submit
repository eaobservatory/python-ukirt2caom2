#!/usr/bin/env python

from __future__ import print_function

from argparse import ArgumentParser
import logging
from pprint import pformat
import re

from taco import Taco

from caom2.caom2_enums import ObservationIntentType
from ukirt2caom2.ingest import IngestRaw
from ukirt2caom2.submit.obs_list import ObsList
from ukirt2caom2.submit.recipe_names import recipe_names

def main():
    instruments = ('cgs3', 'cgs4', 'ircam', 'michelle', 'ufti', 'uist')

    parser = ArgumentParser()

    parser.add_argument('--instrument', '-i', required=True,
                        choices=instruments)
    parser.add_argument('--date', '-d', required=True,
                        default=None)
    parser.add_argument('--dry-run', '-n', required=False,
                        default=False, action='store_true')
    parser.add_argument('--verbose', '-v', required=False,
                        default=False, action='store_true')

    args = parser.parse_args()

    if not re.match('^[0-9]{8}$', args.date):
        raise Exception('Invalid date ' + args.date)

    ukirt_archive_submit(args.instrument, args.date, args.verbose, args.dry_run)

def ukirt_archive_submit(instrument, date, verbose=False, dry_run=False):
    inst_info = recipe_names[instrument]

    logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO)
    logger = logging.getLogger('ukirt_archive_submit')

    logger.debug('Setting up Taco connection to Starlink-Perl')

    taco = Taco(lang='starperl')
    taco.import_module('JAC::Setup', 'omp', 'sybase')
    taco.import_module('JSA::CADC_DP',
                       'connect_to_cadcdp',
                       'create_recipe_instance',
                       'disconnect_from_cadcdp',
                       'dprecinst_url')

    create_recipe_instance = taco.function('create_recipe_instance')
    recipe_instance_url = taco.function('dprecinst_url')

    logger.info('Setting up IngestRaw object')
    raw = IngestRaw()

    logger.info('Fetching observations')
    observations = raw(instrument, date, return_observations=True)
    logger.info('Finished receiving observations')

    calibrations = ObsList()
    standards  = ObsList()
    all_uris = []

    for key in sorted(observations.keys()):
        (date, obs) = key
        (filename, uri, observation, doc) = observations[key]

        logger.info('Considering observation {0} {1}'.format(date, obs))

        recipe = doc['headers'][0]['RECIPE']

        if recipe in inst_info['cal']:
            calibrations(obs)
        elif recipe in inst_info['std']:
            standards(obs)
        else:
            if recipe not in inst_info['sci']:
                logger.warning('Unrecognised recipe name {}'.format(recipe))

        all_uris.append(uri)

    options = {
        'script': 'ukirtwrapdr',
        'dprecipe_tag': 'UKIRT Reduction',
        'tag': '{0}_{1}'.format(instrument, date),
        'priority': -750,
        'extra_parameters': {
            'obscal': calibrations.get_list(),
            'obsstd': standards.get_list(),
        },
    }

    logger.info('Using recipe instance parameters:')
    for line in pformat(options, width=40).splitlines():
        logger.info(line)

    dbh = None

    try:
        if not dry_run:
            logger.info('Connecting to CADC')
            dbh = taco.call_function('connect_to_cadcdp')

            recipe_id = create_recipe_instance(dbh, all_uris, options)

            if recipe_id is not None:
                logger.info('Submitted recipe instance {0}'.format(recipe_id))
                logger.info('Recipe URL: {0}'.format(
                            recipe_instance_url(recipe_id)))
            else:
                logger.error('Error submitting job')
        else:
            for uri in all_uris:
                logger.info('Dry run mode, otherwise adding URI {0}'.format(uri))


    finally:
        if dbh is not None:
            logger.info('Disconnecting from CADC')
            taco.call_function('disconnect_from_cadcdp', dbh)

if __name__ == '__main__':
    main()
